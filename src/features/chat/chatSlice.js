import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { db } from '../../firebase'
import firebase from 'firebase'
import { useDispatch } from 'react-redux'

// action
export const getMessagesAsync = createAsyncThunk(
    'chat/getMessages',
    async () => {
        var messagesRef = db.collection('messages')
        .orderBy('timestamp', 'desc')
        messagesRef.onSnapshot(snapshot => {
            snapshot.forEach(doc => {
                if(doc.exists) {
                    console.log(doc.data())
                    // messagesArray.push({...doc.data()})
                } else {
                    console.log("CANNOT BE FOUND")
                }
            })
        })
        return messagesRef
    }
)
export const sendMessageAsync = createAsyncThunk(
    'chat/sendMessage',
    async ({ message, authState }) => {

        console.log(message)
        console.log(authState)
        db.collection('messages').add({
            // name: payload.userName,
            name: authState.userName,
            text: message,
            profilePicUrl: authState.profilePicUrl,
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        }).catch(error => console.error(error))
            .then(() => {
                console.log('Document success')
            })
        return message
    }
)
const initialState = {
    messages: []
}

const chatSlice = createSlice({
    name: 'chat',
    initialState,
    reducers: {
        getMessages: (state, action) => {
            const { payload } = action
            state.messages = action.payload
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getMessagesAsync.pending, (state) => {
                state.status = 'loading';
            })
            // reducers no async
            .addCase(getMessagesAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.arrayKo = action.payload
            });
    },
});
export const selectMessages = (state) => state.chat;
export const {
    create, getMessages
} = chatSlice.actions
export default chatSlice.reducer